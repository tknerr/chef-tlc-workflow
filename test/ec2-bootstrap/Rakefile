require 'bundler/setup'
require 'fileutils'
require 'chef-workflow/tasks/tlc/deps'

desc "resolve application cookbook with all its dependencies"
task :resolve_deps, [:app_cookbook] do |t, args|
  Rake::Task["tlc:deps:resolve_app_cookbook"].invoke(args[:app_cookbook])
end

desc "bring up the mccloud \"VM\" as configured in the Mccloudfile"
task :up, [:vm_name] do |t, args|
  vm_name = get_required_args(args, :vm_name)
  sh "mccloud up #{vm_name}"
end

desc "provision the mccloud \"VM\" with the provisioners as defined in the Mccloudfile"
task :provision, [:vm_name] do |t, args|
  vm_name = get_required_args(args, :vm_name)
  sh "mccloud provision #{vm_name}"
end

desc "destroy the mccloud \"VM\" with the given name"
task :destroy, [:vm_name] do |t, args|
  vm_name = get_required_args(args, :vm_name)
  sh "mccloud destroy #{vm_name}"
end

desc "ssh into the mccloud \"VM\" with the given name"
task :ssh, [:vm_name] do |t, args|
  vm_name = get_required_args(args, :vm_name)
  sh "mccloud ssh #{vm_name}"
end

desc "show status of all mccloud \"VMs\" defined in the Mccloudfile"
task :status do
  sh "mccloud status"
end

desc "returns the ip address of the mccloud \"VM\" with the given name"
task :get_ip, [:vm_name] do |t, args|
  vm_name = get_required_args(args, :vm_name)
  # TODO: filter out IP of given vm rather than printing status for all
  sh "mccloud status"
end


#
# helper methods below
#
def get_required_args(args, *param_keys)
  param_values = Array.new
  param_keys.each do |param_key|
    fail "parameter #{param_key.to_sym} is required" unless args[param_key.to_sym]
    param_values << args[param_key.to_sym]
  end
  param_values.size == 1 ? param_values[0] : param_values
end
